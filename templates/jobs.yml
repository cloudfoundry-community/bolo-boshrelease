meta:
  bolo:
    address: (( grab jobs.bolo.networks.internal.static_ips[0] ))

update:
  canaries: 1
  max_in_flight: 50
  canary_watch_time: 1000-30000
  update_watch_time: 1000-30000
  serial: false

jobs:
  - name: bolo
    instances: 1
    templates:
      - { release: bolo, name: dbolo     }
      - { release: bolo, name: opentsdb  }
      - { release: bolo, name: bolo      }

    resource_pool: small
    persistent_disk: 0

    networks:
      - name: internal
        static_ips: (( static_ips 0 ))

  - name: gnossis
    instances: 1
    templates:
      - { release: bolo, name: dbolo     }
      - { release: bolo, name: gnossis   }
      - { release: bolo, name: rrd       }
      - { release: bolo, name: rrdcached }

    resource_pool: small
    persistent_disk: 4096

    networks:
      - name: internal
        static_ips: (( static_ips 1 ))

    properties:
      bolo:
        rrd:     { cached: true }
        gnossis: { cached: true }

  - name: grafana
    instances: 1
    templates:
      - { release: bolo, name: dbolo     }
      - { release: bolo, name: grafana   }
      - { release: bolo, name: influxdb  }

    resource_pool: small
    persistent_disk: 4096

    networks:
      - name: internal
        static_ips: (( static_ips 2 ))

    properties:
      bolo:
        influx:
          grafana_secret: fakepassword

  - name: slack
    instances: 1
    templates:
      - { release: bolo, name: dbolo }
      - { release: bolo, name: slack }

    resource_pool: small
    persistent_disk: 0

    networks:
      - name: internal

    properties:
      bolo:
        slack:
          webhook: (( grab $WEBHOOK || "https://localhost/you/need/a/real/webhook/here" ))
          channel: (( grab $CHANNEL || "botspam" ))
          botname: Marco Bolo
          avatar:  robot_face

properties:
  bolo:
    submission:   (( grab meta.bolo ))
    subscription: (( grab meta.bolo ))
  dbolo:
    collectors:
      - { every: 20s, run: linux }
      - { every: 20s, run: process -n dbolo -m dbolo }

networks:
  - name: internal
    subnets: (( param "Please define your Network Subnets" ))
